@model IEnumerable<DevPhone.Models.MDispositivo>
@{
    ViewData["Title"] = "Gestión de Dispositivos";
}

<style>
    [x-cloak] {
        display: none !important
    }

    /* Estilos mejorados para tabla */
    .table {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
        border: none;
    }

    .table thead th {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        font-weight: 600;
        border: none;
        padding: 1rem 0.75rem;
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .table tbody td {
        padding: 1rem 0.75rem;
        border-top: 1px solid #f1f5f9;
        vertical-align: middle;
        font-size: 0.9rem;
    }

    .table tbody tr {
        transition: all 0.2s ease;
    }

    .table tbody tr:hover {
        background-color: #f8fafc;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px -2px rgb(0 0 0 / 0.1);
    }

    .table tbody tr:last-child td {
        border-bottom: none;
    }

    /* Botones de acción mejorados */
    .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.8rem;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .btn-warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        border: none;
        color: white;
    }

    .btn-warning:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.4);
    }

    .btn-danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        border: none;
        color: white;
    }

    .btn-danger:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
    }

    /* Modal backdrop mejorado - Oculta completamente el header */
    .modal-backdrop-custom {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
        background: rgba(0, 0, 0, 0.9) !important;
        backdrop-filter: blur(10px) !important;
        z-index: 9999 !important;
        margin: 0 !important;
        padding: 0 !important;
        overflow: hidden !important;
    }

    /* Forzar ocultación del header cuando modal está activo */
    .modal-active .main-header {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
    }

    .modal-active body {
        overflow: hidden !important;
    }

    /* Bloquear scroll cuando modal está activo */
    body:has(.modal-backdrop-custom) {
        overflow: hidden !important;
    }

    /* Asegurar que el modal esté sobre todo */
    .modal-backdrop-custom {
        isolation: isolate !important;
    }

    /* Estilos mejorados para tarjetas de modal */
    .modal-backdrop-custom .card {
        background: white !important;
        border-radius: 16px !important;
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        backdrop-filter: blur(20px) !important;
        max-height: 90vh !important;
        overflow-y: auto !important;
    }

    .modal-backdrop-custom .card .btn-close {
        background: none !important;
        opacity: 0.8 !important;
    }

    .modal-backdrop-custom .card .btn-close:hover {
        opacity: 1 !important;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .table {
            font-size: 0.8rem;
        }
        
        .table thead th,
        .table tbody td {
            padding: 0.5rem;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
    }
</style>

<div x-data="deviceManager()" class="container-fluid">

    <!-- Mensajes -->
    @if (ViewBag.Success != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @ViewBag.Success
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @ViewBag.Error
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Título + Botón Nuevo -->
    <div class="d-flex justify-content-between align-items-center my-4">
        <h2>@ViewData["Title"]</h2>
        <button class="btn btn-primary" x-on:click="openAdd()">
            <i class="bi bi-plus-lg"></i> Nuevo Dispositivo
        </button>
    </div>

    <!-- Tabla -->
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Serie</th>
                <th>Modelo</th>
                <th>Marca</th>
                <th>Fecha Ingreso</th>
                <th>Estado</th>
                <th>Cliente</th>
                <th style="width:120px">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var d in Model)
            {
                <tr>
                    <td>@d.Serie</td>
                    <td>@d.Modelo</td>
                    <td>@d.Marca</td>
                    <td>@d.FechaIngreso.ToString("g")</td>
                    <td>@d.EstadoActual</td>
                    <td>@d.Cliente.Nombre @d.Cliente.Apellido</td>
                    <td>
                        <button class="btn btn-sm btn-warning me-1"
                                x-on:click="openEdit({
                      id: @d.IdDispositivo,
                      serie: '@d.Serie',
                      modelo: '@d.Modelo',
                      marca: '@d.Marca',
                      estado: '@d.EstadoActual',
                      clienteId: @d.IdCliente,
                      clienteText: '@d.Cliente.Nombre @d.Cliente.Apellido (@d.Cliente.Cedula)'
                    })">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-danger"
                                x-on:click="openDelete({ id: @d.IdDispositivo, serie: '@d.Serie' })">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Modal Agregar -->
    <template x-if="showAdd">
        <div x-cloak class="modal-backdrop-custom d-flex align-items-center justify-content-center"
             style="z-index:9999 !important;">
            <div class="card p-4" style="width:420px;">
                <div class="d-flex justify-content-between mb-3">
                    <h5>Nuevo Dispositivo</h5>
                    <button class="btn-close" x-on:click="closeAdd()"></button>
                </div>
                <form x-ref="addForm" x-on:submit.prevent="submitAdd" method="post" asp-action="Create">
                    @Html.AntiForgeryToken()

                    <div class="mb-2">
                        <label class="form-label">Serie</label>
                        <input name="Serie" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Modelo</label>
                        <input name="Modelo" class="form-control" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Marca</label>
                        <input name="Marca" class="form-control" />
                    </div>

                    <!-- Aquí va el combo de Estados -->
                    <div class="mb-2">
                        <label class="form-label">Estado</label>
                        <select name="EstadoActual" class="form-select" x-model="addSelectedState">
                            <template x-for="s in deviceStates" :key="s">
                                <option :value="s" x-text="s"></option>
                            </template>
                        </select>
                    </div>

                    <!-- Búsqueda Cliente -->
                    <div class="mb-2">
                        <label class="form-label">Cliente</label>
                        <input type="text" class="form-control"
                               placeholder="Buscar cliente..."
                               x-model="addClientTerm"
                               x-on:input.debounce="searchClients('add')">
                        <ul class="list-group position-absolute w-100 zindex-popover"
                            x-show="addClientResults.length">
                            <template x-for="c in addClientResults" :key="c.id">
                                <li class="list-group-item list-group-item-action"
                                    x-on:click="selectClient('add', c)">
                                    <span x-text="c.text"></span>
                                </li>
                            </template>
                        </ul>
                        <input type="hidden" name="IdCliente" x-model="addSelectedClient.id" />
                        <div class="mt-1 text-success" x-text="addSelectedClient.text"></div>
                    </div>

                    <div class="text-end mt-3">
                        <button type="button" class="btn btn-secondary me-2" x-on:click="closeAdd()">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </div>
                </form>
            </div>
        </div>
    </template>

    <!-- Modal Editar -->
    <template x-if="showEdit">
        <div x-cloak class="modal-backdrop-custom d-flex align-items-center justify-content-center"
             style="z-index:9999 !important;">
            <div class="card p-4" style="width:420px;">
                <div class="d-flex justify-content-between mb-3">
                    <h5>Editar Dispositivo</h5>
                    <button class="btn-close" x-on:click="closeEdit()"></button>
                </div>
                <form x-ref="editForm" :action="`/Dispositivo/Edit/${editData.id}`" x-on:submit.prevent="submitEdit" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="IdDispositivo" x-model="editData.id" />

                    <div class="mb-2">
                        <label class="form-label">Serie</label>
                        <input name="Serie" class="form-control" x-model="editData.serie" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Modelo</label>
                        <input name="Modelo" class="form-control" x-model="editData.modelo" />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Marca</label>
                        <input name="Marca" class="form-control" x-model="editData.marca" />
                    </div>

                    <!-- Combo de Estados en Editar -->
                    <div class="mb-2">
                        <label class="form-label">Estado</label>
                        <select name="EstadoActual" class="form-select" x-model="editData.estado">
                            <template x-for="s in deviceStates" :key="s">
                                <option :value="s" x-text="s"></option>
                            </template>
                        </select>
                    </div>

                    <!-- Cliente -->
                    <div class="mb-2">
                        <label class="form-label">Cliente</label>
                        <input type="text" class="form-control"
                               x-model="editClientTerm"
                               x-on:input.debounce="searchClients('edit')">
                        <ul class="list-group position-absolute w-100 zindex-popover"
                            x-show="editClientResults.length">
                            <template x-for="c in editClientResults" :key="c.id">
                                <li class="list-group-item list-group-item-action"
                                    x-on:click="selectClient('edit', c)">
                                    <span x-text="c.text"></span>
                                </li>
                            </template>
                        </ul>
                        <input type="hidden" name="IdCliente" x-model="editSelectedClient.id" />
                        <div class="mt-1 text-success" x-text="editSelectedClient.text"></div>
                    </div>

                    <div class="text-end mt-3">
                        <button type="button" class="btn btn-secondary me-2" x-on:click="closeEdit()">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Actualizar</button>
                    </div>
                </form>
            </div>
        </div>
    </template>

    <!-- Modal Eliminar (sin cambios) -->
    <template x-if="showDelete">
        <div x-cloak class="modal-backdrop-custom d-flex align-items-center justify-content-center" style="z-index:9999 !important;">
            <div class="card p-4" style="width:320px;">
                <h5 class="mb-3">Eliminar Dispositivo</h5>
                <p>¿Eliminar dispositivo <strong x-text="deleteData.serie"></strong>?</p>
                <form x-on:submit.prevent="submitDelete" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" x-model="deleteData.id" />
                    <div class="text-end mt-3">
                        <button type="button" class="btn btn-secondary me-2" x-on:click="closeDelete()">Cancelar</button>
                        <button type="submit" class="btn btn-danger">Eliminar</button>
                    </div>
                </form>
            </div>
        </div>
    </template>

</div>

<script>
    function deviceManager() {
      return {
        // flags de modales
        showAdd:false, showEdit:false, showDelete:false,

        // lista de estados
        deviceStates: [
          'Ingresado',
          'En Progreso',
          'Reparado',
          'Entregado',
          'Pendiente'
        ],

        // datos Add
        addClientTerm:'', addClientResults:[], addSelectedClient:{},
        addSelectedState: 'Ingresado',

        // datos Edit
        editClientTerm:'', editClientResults:[], editSelectedClient:{},
        editData:{}, deleteData:{},

        openAdd() {
          this.addClientTerm=''; this.addClientResults=[]; this.addSelectedClient={};
          this.addSelectedState = this.deviceStates[0];
          this.showAdd = true;
          this.toggleHeaderVisibility(true);
        },
        closeAdd(){ 
          this.showAdd=false; 
          this.toggleHeaderVisibility(false);
        },

        openEdit(d) {
          this.editData={ ...d };
          this.editClientTerm = d.clienteText;
          this.editSelectedClient = { id:d.clienteId, text:d.clienteText };
          this.showEdit = true;
          this.toggleHeaderVisibility(true);
        },
        closeEdit(){ 
          this.showEdit=false; 
          this.toggleHeaderVisibility(false);
        },

        openDelete(d) {
          this.deleteData={ id:d.id, serie:d.serie };
          this.showDelete = true;
          this.toggleHeaderVisibility(true);
        },
        closeDelete(){ 
          this.showDelete=false; 
          this.toggleHeaderVisibility(false);
        },

        async searchClients(mode) {
          const term = mode==='add'? this.addClientTerm : this.editClientTerm;
          if(term.length<2) {
            if(mode==='add') this.addClientResults=[]; else this.editClientResults=[];
            return;
          }
          const res = await fetch(`/Cliente/Search?q=${encodeURIComponent(term)}`);
          const json = await res.json();
          if(mode==='add') this.addClientResults=json; else this.editClientResults=json;
        },
        selectClient(mode,c){
          if(mode==='add'){
            this.addSelectedClient=c; this.addClientResults=[]; this.addClientTerm=c.text;
          } else {
            this.editSelectedClient=c; this.editClientResults=[]; this.editClientTerm=c.text;
          }
        },

        submitAdd(){
          // antes de enviar, fija estado y cliente
          const f = this.$refs.addForm;
          f.querySelector('select[name="EstadoActual"]').value = this.addSelectedState;
          f.querySelector('input[name="IdCliente"]').value  = this.addSelectedClient.id;
          f.submit();
        },
        submitEdit(){
          const f = this.$refs.editForm;
          f.querySelector('select[name="EstadoActual"]').value = this.editData.estado;
          f.querySelector('input[name="IdCliente"]').value     = this.editSelectedClient.id;
          f.submit();
        },
        submitDelete(){
          const f = event.target;
          f.action = `/Dispositivo/Delete/${this.deleteData.id}`;
          f.submit();
        },
        toggleHeaderVisibility(hide) {
          const header = document.querySelector('.main-header');
          const body = document.body;
          if (hide) {
            header.style.display = 'none';
            header.style.visibility = 'hidden';
            header.style.opacity = '0';
            body.classList.add('modal-active');
            body.style.overflow = 'hidden';
          } else {
            header.style.display = '';
            header.style.visibility = '';
            header.style.opacity = '';
            body.classList.remove('modal-active');
            body.style.overflow = '';
          }
        }
      }
    }
</script>
